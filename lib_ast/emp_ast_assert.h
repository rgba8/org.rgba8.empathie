//-----------------------------------------------------------------------------
//
// File Name : emp_ast_assert.h
//
// Creation Date : Mon 4 Jan 2009 10:41:27 PM CEST
//
// Modification Date : mar. 26 nov. 2013 18:09:04 CET
//
// Created By : ksej - www.rgba8.org
//
// Description :
//
//-----------------------------------------------------------------------------
#ifndef EMP_AST_ASSERT_H
#define EMP_AST_ASSERT_H

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#if defined(EMP_XX_ASSERT_ENABLE) || defined(EMP_XX_ASSERT_OUTPUT_ENABLE)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#include "emp_ast_statement.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#include "emp_xx_return.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
namespace emp { namespace ast {

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_CLASS(assert_t)
private:
    bool m_bCondition;
    char const* m_szCondition;
    statement_t  m_Statement;

public:
    assert_t(   bool const a_bCondition,
                char const* const a_szCondition,
                statement_t const& a_rStatement):
                m_bCondition(a_bCondition),
                m_szCondition(a_szCondition),
                m_Statement(a_rStatement)
    { }

public:
    EMP_RETURN bool b_condition(void) const
    { return m_bCondition; }

    EMP_RETURN char const* sz_condition(void) const
    { return m_szCondition; }

    EMP_RETURN statement_t const& statement(void) const
    { return m_Statement; }
};

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void condition(assert_t const& a_rAssert);

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
} }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#endif

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#ifdef EMP_XX_ASSERT_ENABLE

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT_INFO(x_Condition)\
    emp::ast::assert_t(  x_Condition, EMP_PP_STRING(x_Condition),\
                        EMP_STATEMENT_INFO())

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT(x_Condition)\
do { emp::ast::condition(EMP_ASSERT_INFO(x_Condition)); } while(0)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT_UNREACHABLE()\
    EMP_ASSERT(false);

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT_NOT_IMPLEMENTED()\
    EMP_ASSERT(false);

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT_BOOL_CALL(x_Call)\
    EMP_ASSERT(x_Call)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#else

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#include "emp_tt_assert.h"
#include "emp_tt_ignore_return.h"

#include "emp_xx_noop.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT(x_Condition) EMP_XX_NOOP()

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT_UNREACHABLE() EMP_XX_NOOP()

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT_NOT_IMPLEMENTED() EMP_STATIC_ASSERT(false)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#define EMP_ASSERT_BOOL_CALL(x_Call)\
    emp::tt::ignore_return(x_Call)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#endif

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#endif

